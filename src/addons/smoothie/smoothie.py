import time
import random
from aiogram.types import user
import aiohttp
from datetime import datetime
from typing import List, Union
from abc import ABC, abstractmethod

from aiogram import types
from aiogram.dispatcher.filters.builtin import IDFilter
from loguru import logger

import config as cfg
from config import dp, bot

# Models
from support.models.recipe import Recipe
from support.models.chat import Chat
from support.models.user import User

# Repos
from support.repositories.users import UserRepository
from support.repositories.recipes import RecipeRepository

from addons.smoothie.smoothie_api import (all_recipe, generate_list_to_remove)

logger.debug("smoothie loaded")

smoothie_riner_phrases = [
    "–ú–æ–π—Ç–µ —Ä—É–∫–∏ –ø–µ—Ä–µ–¥ –µ–¥–æ–π üåö",
    "–í —ç—Ç–æ–π —Å—Ç–æ–ª–æ–≤–æ–π –∫–æ—Ä–º—è—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ Black Meza",
]

trotle = []


class BaseCheker():
    def __init__(self, href: str, secret_key: str) -> None:
        self.href = href
        self.secret_key = secret_key


class MesaCheker(BaseCheker):

    def __init__(self, href: str, secret_key: str) -> None:
        self.href = "https://jarvis.bshelf.pw/api/{secret_key}/is_mesa?chat_id={user_id}"
        self.secret_key = secret_key

    async def validate(self, user_id: int) -> bool:
        answ = self.href.format(**{"secret_key": self.secret_key, "user_id": user_id})
        print(answ)
        async with aiohttp.ClientSession() as session:
            async with session.get(answ) as resp:
                resp = await resp.text()
                if resp != "true":
                    return False
                return True


class StarkCheker(BaseCheker):

    def __init__(self, href: str, secret_key: str) -> None:
        self.href = href
        self.secret_key = secret_key

    async def validate(self, user_id: int) -> bool:
        answ = self.href.format(**{"secret_key": self.secret_key, "user_id": user_id})
        print(answ)
        async with aiohttp.ClientSession() as session:
            async with session.get(answ) as resp:
                resp = await resp.text()
                if resp != "true":
                    return True
                return False

corp = {
    "mesa": MesaCheker, 
    "stark": StarkCheker,
}


class Smootie():
    _smoothies: List[Recipe] = []
    _possible_recipe: List[int] = all_recipe()
    _date_smoothie = datetime.utcnow().date()

    def __new__(cls):
        if not hasattr(cls, 'instance'):
            cls.instance = super(Smootie, cls).__new__(cls)
        return cls.instance


    def discard(self, ) -> bool:
        self._smoothies = []
        self._possible_recipe = all_recipe()
        self._date_smoothie = datetime.utcnow().date()


    async def add_recipe(self, from_user, recipe, pos_find, bonus) -> Recipe:
        # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–º—É–∑–∏ 
        if not self._date_smoothie == datetime.utcnow().date():
            self.discard()

        new_recipe = Recipe(
            from_user = from_user,
            recipe = recipe,
            pos_find = pos_find,
            bonus = bonus,
        )
        self._smoothies.append(new_recipe)
        await RecipeRepository().create(new_recipe)

        self.udp_possible_recipe_list(new_recipe)

        return new_recipe


    def udp_possible_recipe_list(self, new_recipe: Recipe):
        try:
            self._possible_recipe = generate_list_to_remove(
                self._possible_recipe,
                new_recipe.recipe,
                new_recipe.pos_find, 
            )
        except AttributeError:
            raise Exception("You must pass a value of type Recipe")
            

    def get_best(self, ) -> Union[Recipe, bool]:
        # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–º—É–∑–∏ 
        if not self._date_smoothie == datetime.utcnow().date():
            self.discard()

        for recipe in self._smoothies:
            recipe:Recipe
            if recipe.pos_find == 5:
                return recipe
        else:
            return False


    def get_variant(self, how_much:int) -> str:
        recipe_list = self._possible_recipe
        text = f"\nüí† –û—Å—Ç–∞–ª–æ—Å—å {len(recipe_list)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞."

        if len(recipe_list) < how_much:
            how_much = len(recipe_list)

        while how_much > 0:
            random_recipe = self.to_smile(random.choice(recipe_list))
            if random_recipe in text:
                continue
            text += f"\n* <code>{random_recipe}</code>"
            how_much -= 1

        # add rp bonus to text
        lvl = 0
        bonus = ""
        for i in self._smoothies:
            if i.pos_find > lvl:
                lvl = i.pos_find
                bonus = i.bonus

        text += f"\n\n<b>üçÄ–ë–æ–Ω—É—Å: </b> {bonus}"  if bonus not in ["", "–†–µ—Ü–µ–ø—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"] else ""
        return text


    def parse_pos_find(self, text):
        if "‚ùóÔ∏è–£–≤—ã, –Ω–æ —Ç–≤–æ–π —Å–º—É–∑–∏ —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –Ω–µ –æ—á–µ–Ω—å." in text:
            pos_find = 0
        elif "üòê–ù–µ–ø–ª–æ—Ö–æ–π —Å–º—É–∑–∏, –Ω–æ –±—ã–≤–∞–ª–æ –∏ –ª—É—á—à–µ." in text:
            pos_find = 2
        elif "üòÄ–•–æ—Ä–æ—à–∏–π —Å–º—É–∑–∏, —Ä–µ—Å–ø–µ–∫—Ç." in text:
            pos_find = 3
        elif "üòÅ–û—Ç–ª–∏—á–Ω—ã–π —Å–º—É–∑–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!" in text:
            pos_find = 4
        elif "üòç–°–∞–º—ã–π —à–∏–∫–∞—Ä–Ω—ã–π —Å–º—É–∑–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!" in text:
            pos_find = 5

        if pos_find is None:
            logger.error("–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–º—É–∑–∏")
            raise "–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–º—É–∑–∏"

        return pos_find


    def to_nums(self, recipe:str):
        """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–º—É–∑–∏ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–µ"""
        
        user_frendly_recipe =""
        for i in list(recipe):
            if i == "üçã":
                user_frendly_recipe += "".join("1")
            if i == "üçá":
                user_frendly_recipe += "".join("2")
            if i == "üçè":
                user_frendly_recipe += "".join("3")
            if i == "ü•ï":
                user_frendly_recipe += "".join("4")
            if i == "üçÖ":
                user_frendly_recipe += "".join("5")
        return user_frendly_recipe


    def to_smile(self, recipe:int):
        """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–º—É–∑–∏ –≤ —Å–∏–º–≤–æ–ª—å–Ω–æ–µ"""

        user_frendly_recipe =""
        for i in list(recipe):
            if i == "1":
                user_frendly_recipe += "".join("üçã")
            if i == "2":
                user_frendly_recipe += "".join("üçá")
            if i == "3":
                user_frendly_recipe += "".join("üçè")
            if i == "4":
                user_frendly_recipe += "".join("ü•ï")
            if i == "5":
                user_frendly_recipe += "".join("üçÖ")
        return user_frendly_recipe


    def parse_bonus(self, text: str) -> str:
        if "‚ùóÔ∏è–£–≤—ã, –Ω–æ —Ç–≤–æ–π —Å–º—É–∑–∏ —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –Ω–µ –æ—á–µ–Ω—å." in text:
            return "–†–µ—Ü–µ–ø—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        elif "–≠—Ç–æ—Ç —Å–º—É–∑–∏ —Ö—É–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç–∞–∫ —á—Ç–æ –±–æ–Ω—É—Å –æ—Å—Ç–∞—ë—Ç—Å—è –ª—É—á—à–∏–π." in text:
            return "–†–µ—Ü–µ–ø—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        else:
            text = text.split("\n")
            return text[6]


    async def restart(self, ) -> bool:
        self.discard()
        l: List[Recipe] = await RecipeRepository().get_by_day()

        for recipe in l:
            self.udp_possible_recipe_list(
                recipe
            )


# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–º—É–∑–∏
@dp.message_handler(IDFilter(user_id=[*cfg.admins]), commands=["smoothie_restart"],)
async def restart_smoothie(message: types.Message, Chat:Chat, User:User, sm:Smootie = Smootie()):
    start_time = time.time()
    await sm.restart()
    await message.answer(f"–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é —Å–º—É–∑–∏ ^_^ \n–ó–∞—Ç—Ä–∞—á–µ–Ω–æ: {int(time.time() - start_time)} —Å–µ–∫")


# –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä
@dp.message_handler(text='üçπ–°–º—É–∑–∏')
@dp.message_handler(commands=["smoothie"])
async def send_smoothie(message: types.Message, Chat:Chat, User:User, sm:Smootie = Smootie()):
    a = sm.get_best()

    if not a:
        await message.answer(
            f"–ü–æ–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –ª—É—á—à–µ–≥–æ —Å–º—É–∑–∏, –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:{sm.get_variant(5)}"
            )
        return

    user: User = await UserRepository().get_by_id(a.from_user)

    text_best_smoothie = (
        f"<b>üòç –°–∞–º—ã–π —à–∏–∫–∞—Ä–Ω—ã–π —Å–º—É–∑–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n</b>"
        # f"<b>–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª:</b> <a href ='tg://user?id={user.id}'>{str(user.name)}</a>\n\n"
        f"<b>–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª:</b> {str(user.name)}\n\n"
        f"<b>–†–µ—Ü–µ–ø—Ç:</b> <code>{sm.to_smile(a.recipe)}</code>\n\n"
        f"<b>–ë–æ–Ω—É—Å:</b> {a.bonus}\n")

    await message.answer(
        text_best_smoothie,
        parse_mode="html",
        disable_notification=True,
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã
@dp.message_handler(
    regexp='–¢—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª üçπ–°–º—É–∑–∏',
)
async def get_smoothie_from_SW(message: types.Message, User:User, Chat:Chat, sm:Smootie = Smootie()):
    # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ —Å–º—É–∑–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤
    if message.text in trotle:
        return

    trotle.append(message.text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –µ—â–µ –Ω–µ—Ç –ª—É—á—à–µ–≥–æ —Å–º—É–∑–∏
    if sm.get_best():
        await message.answer("–û–ø–æ–∑–¥–∞–ª, –ª—É—á—à–∏–π —Å–º—É–∑–∏ —É–∂–µ –Ω–∞–π–¥–µ–Ω\n /smoothie")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤–µ–∂–∏–π —Ñ–æ—Ä–≤–∞—Ä–¥
    if  not message.forward_from or \
        not message.forward_from.id  == cfg.SW_BOT_ID or\
        not datetime.utcnow().date() == message.forward_date.date():
        
        logger.info(f"{datetime.utcnow().date()}{message.forward_date.date()}")
        logger.info(f"{message.forward_from.id } { type(cfg.SW_BOT_ID)}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id {User.name} {User.id} –û—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–º—É–∑–∏")
        await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã —Å–º—É–∑–∏ –æ—Ç @StartupWarsBot")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –∫–æ—Ä–ø—ã

    # if PermissionSmoothieCheker.validate(User.id):
    #     await message.answer(random.choice(smoothie_riner_phrases))
    #     return
        
    answ = f"https://jarvis.bshelf.pw/api/vafelkyaismylove/is_mesa?chat_id={User.id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(answ) as resp:
            resp = await resp.text()
            if resp != "true":
                await message.answer(random.choice(smoothie_riner_phrases))
                return


    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥ –∏ –ø–∏—à–µ—Ç –≤ –ë–î
    rp = await sm.add_recipe(
        User.id,
        sm.to_nums(message.text), 
        sm.parse_pos_find(message.text), 
        sm.parse_bonus(message.text)
        )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Å–º—É–∑–∏
    await bot.send_message(cfg.SMOOTHIE_LOG_CHAT_ID,
            f"<a href ='tg://user?id={rp.from_user}'>{User.name}</a> "
            f"–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Å–º—É–∑–∏\n"
            f"üçπ –†–µ—Ü–µ–ø—Ç: {sm.to_smile(rp.recipe)}\n"
            f"üí† –û—Ç–≥–∞–¥–∞–Ω–æ: {rp.pos_find}\n"
            f"<b>–ë–æ–Ω—É—Å:</b> {rp.bonus}\n",
            parse_mode="html",
            disable_notification=True,)

    if rp.pos_find == 5:
        await message.answer("–¢—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Å–º—É–∑–∏ –¥–Ω—è ü•Ç –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª—É—á—à–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        text_best_smoothie = (
            f"<b>–†–µ—Ü–µ–ø—Ç:</b> <code>{sm.to_smile(rp.recipe)}</code>\n\n"
            f"<b>–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª:</b> <a href ='tg://user?id={User.id}'>{User.name}</a>\n\n"
            f"<b>–ë–æ–Ω—É—Å:</b> {rp.bonus}\n")

        await bot.send_message(
            cfg.SMOOTHIE_CHANNEL_ID, 
            text_best_smoothie, 
            parse_mode="html", 
            disable_notification=True,)

    else:
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, —è –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π —Ä–µ—Ü–µ–ø—Ç, –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å–º—É–∑–∏:{sm.get_variant(5)}")
    
    trotle.clear()
    

