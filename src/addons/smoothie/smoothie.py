from typing import List, Optional, Union

from aiogram.types import chat
from config import dp, bot
from aiogram import Bot, Dispatcher, types
# from loader import bot, dp, storage
# from filters import IsAdmin
import random
# from utils.db_api.db import Smoothie_db
# from middlewares.smoothie_algo import _main as smoothie
from datetime import datetime
import config as cfg

from loguru import logger

from support.models.recipe import Recipe
from support.models.chat import Chat
from support.models.user import User 

# Repos
from support.repositories.users import UserRepository
from addons.smoothie.smoothie_api import (all_recipe, generate_list_to_remove)

logger.debug("smoothie loaded")

import timeit
class Smootie():
    _smoothies: List[Recipe] = []
    _possible_recipe: List[int] = all_recipe()

    def __new__(cls):
        if not hasattr(cls, 'instance'):
            cls.instance = super(Smootie, cls).__new__(cls)
        return cls.instance

    def add_recipe(self, from_user, recipe, pos_find, bonus) -> Recipe:
        new_recipe = Recipe(
            from_user = from_user,
            recipe = recipe,
            pos_find = pos_find,
            bonus = bonus,
        )
        self._smoothies.append(new_recipe)

        self._possible_recipe = generate_list_to_remove(
            self._possible_recipe,
            new_recipe.recipe,
            new_recipe.pos_find, 
            )
        return new_recipe

    def send_best(self, ) -> Union[Recipe, bool]:
        for i in self._smoothies:
            i:Recipe
            if i.pos_find == 5:
                return i
        else:
            return False


    def get_variant(self, how_much:int) -> str:
        recipe_list = self._possible_recipe
        text = f"\nüí† –û—Å—Ç–∞–ª–æ—Å—å {len(recipe_list)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞."

        if len(recipe_list) < how_much:
            how_much = len(recipe_list)

        while how_much > 0:
            random_recipe = self.to_smile(random.choice(recipe_list))
            if random_recipe in text:
                continue
            text += f"\n* <code>{random_recipe}</code>"
            how_much -= 1
        return text
        pass

    def parse_pos_find(self, text):
        if "‚ùóÔ∏è–£–≤—ã, –Ω–æ —Ç–≤–æ–π —Å–º—É–∑–∏ —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –Ω–µ –æ—á–µ–Ω—å." in text:
            pos_find = 0
        elif "üòê–ù–µ–ø–ª–æ—Ö–æ–π —Å–º—É–∑–∏, –Ω–æ –±—ã–≤–∞–ª–æ –∏ –ª—É—á—à–µ." in text:
            pos_find = 2
        elif "üòÄ–•–æ—Ä–æ—à–∏–π —Å–º—É–∑–∏, —Ä–µ—Å–ø–µ–∫—Ç." in text:
            pos_find = 3
        elif "üòÅ–û—Ç–ª–∏—á–Ω—ã–π —Å–º—É–∑–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!" in text:
            pos_find = 4
        elif "üòç–°–∞–º—ã–π —à–∏–∫–∞—Ä–Ω—ã–π —Å–º—É–∑–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!" in text:
            pos_find = 5

        if pos_find is None:
            logger.error("–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–º—É–∑–∏")
            raise "–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–º—É–∑–∏"

        return pos_find

    def to_nums(self, recipe:str):
        """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–º—É–∑–∏ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–µ"""
        
        user_frendly_recipe =""
        for i in list(recipe):
            if i == "üçã":
                user_frendly_recipe += "".join("1")
            if i == "üçá":
                user_frendly_recipe += "".join("2")
            if i == "üçè":
                user_frendly_recipe += "".join("3")
            if i == "ü•ï":
                user_frendly_recipe += "".join("4")
            if i == "üçÖ":
                user_frendly_recipe += "".join("5")
        return user_frendly_recipe

    def to_smile(self, recipe:int):
        """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–º—É–∑–∏ –≤ —Å–∏–º–≤–æ–ª—å–Ω–æ–µ"""

        user_frendly_recipe =""
        for i in list(recipe):
            if i == "1":
                user_frendly_recipe += "".join("üçã")
            if i == "2":
                user_frendly_recipe += "".join("üçá")
            if i == "3":
                user_frendly_recipe += "".join("üçè")
            if i == "4":
                user_frendly_recipe += "".join("ü•ï")
            if i == "5":
                user_frendly_recipe += "".join("üçÖ")
        return user_frendly_recipe
    
    def parse_bonus(self, text: str) -> str:
        if "‚ùóÔ∏è–£–≤—ã, –Ω–æ —Ç–≤–æ–π —Å–º—É–∑–∏ —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –Ω–µ –æ—á–µ–Ω—å." in text:
            return "–†–µ—Ü–µ–ø—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        elif "–≠—Ç–æ—Ç —Å–º—É–∑–∏ —Ö—É–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç–∞–∫ —á—Ç–æ –±–æ–Ω—É—Å –æ—Å—Ç–∞—ë—Ç—Å—è –ª—É—á—à–∏–π." in text:
            return "–†–µ—Ü–µ–ø—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        else:
            text = text.split("\n")
            return text[6]
    
    def discard(self, ) -> bool:
        self._smoothies = []
        self._possible_recipe = all_recipe()

    async def log_smoothie(self, r: Recipe, admin_chat:int = cfg.SMOOTHIE_LOG_CHAT_ID) -> bool:
        await bot.send_message(admin_chat,
                f"<a href ='tg://user?id={r.from_user}'>{r.from_user}</a>"
                f"–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Å–º—É–∑–∏\n"
                f"üçπ –†–µ—Ü–µ–ø—Ç: {r.recipe}\n"
                f"üí† –û—Ç–≥–∞–¥–∞–Ω–æ: {r.pos_find}",
                parse_mode="html")


# –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä
@dp.message_handler(text='üçπ–°–º—É–∑–∏')
@dp.message_handler(commands=["smoothie"])
async def get_smoothie(message: types.Message, Chat:Chat, User:User, sm:Smootie = Smootie()):
    a = sm.send_best()
    if a:
        user: User = await UserRepository().get_by_id(a.from_user)
        text_best_smoothie = (
            f"<b>üòç –°–∞–º—ã–π —à–∏–∫–∞—Ä–Ω—ã–π —Å–º—É–∑–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n</b>"
            f"<b>–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª:</b> <a href ='tg://user?id={user.id}'>{str(user.name)}</a>\n\n"
            f"<b>–†–µ—Ü–µ–ø—Ç:</b> <code>{sm.to_smile(a.recipe)}</code>\n\n"
            f"<b>–ë–æ–Ω—É—Å:</b> {a.bonus}\n")
        await message.answer(text_best_smoothie, parse_mode="html")
    else:
        await message.answer(
            f"–ü–æ–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –ª—É—á—à–µ–≥–æ —Å–º—É–∑–∏, –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:{sm.get_variant(5)}"
            )


@dp.message_handler(regexp='–¢—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª üçπ–°–º—É–∑–∏')
async def get_smoothie_from_SW(message: types.Message, User:User, Chat:Chat, sm:Smootie = Smootie()):
    now = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –µ—â–µ –Ω–µ—Ç –ª—É—á—à–µ–≥–æ —Å–º—É–∑–∏
    best = sm.send_best()
    if best:
        await message.answer("–û–ø–æ–∑–¥–∞–ª, –ª—É—á—à–∏–π —Å–º—É–∑–∏ —É–∂–µ –Ω–∞–π–¥–µ–Ω\n /smoothie")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤–µ–∂–∏–π —Ñ–æ—Ä–≤–∞—Ä–¥
    if not message.forward_from\
        or not message.forward_from.id  == cfg.SW_BOT_ID\
        or not now.date() == message.forward_date.date():
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id {User.name} {User.id} –û—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–º—É–∑–∏")
        await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã —Å–º—É–∑–∏ –æ—Ç @StartupWarsBot")
        return

    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    # if not db.user_in_whitelist(message.from_user.id):
    #     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c id {message.from_user.id} –Ω–µ—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ")
    #     await message.answer("–¢–µ–±—è –Ω–µ—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ, –µ—Å–ª–∏ —Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ‚ö°Ô∏èStark Ind —Ç–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—è—Ç")
    #     btn = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫', callback_data=f'add_smoothie_user_{message.from_user.id}')
    #     kb = types.InlineKeyboardMarkup().add(btn)
    #     await bot.send_message(config.admin_chat,
    #         f"<a href ='tg://user?id={message.from_user.id}'>{username.full_name}</a> "
    #         f"–ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Å–º—É–∑–∏ –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ\n\n"
    #         f"<code>{message.text}</code>",
    #         parse_mode="html",
    #         reply_markup=kb)
    #     return


    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥ –∏ –ø–∏—à–µ—Ç –≤ –ë–î
    rp = sm.add_recipe(
        User.id,
        sm.to_nums(message.text), 
        sm.parse_pos_find(message.text), 
        sm.parse_bonus(message.text)
        )
    raise
    await bot.send_message(cfg.SMOOTHIE_LOG_CHAT_ID,
            f"<a href ='tg://user?id={rp.from_user}'>{User.name}</a> "
            f"–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Å–º—É–∑–∏\n"
            f"üçπ –†–µ—Ü–µ–ø—Ç: {sm.to_smile(rp.recipe)}\n"
            f"üí† –û—Ç–≥–∞–¥–∞–Ω–æ: {rp.pos_find}\n"
            f"<b>–ë–æ–Ω—É—Å:</b> {rp.bonus}\n",
            parse_mode="html")

    if rp.pos_find == 5:
        await message.answer("–¢—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Å–º—É–∑–∏ –¥–Ω—è ü•Ç –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        text_best_smoothie = (
            f"<b>–†–µ—Ü–µ–ø—Ç:</b> <code>{sm.to_smile(rp.recipe)}</code>\n\n"
            f"<b>–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª:</b> <a href ='tg://user?id={User.id}'>{User.name}</a>\n\n"
            f"<b>–ë–æ–Ω—É—Å:</b> {rp.bonus}\n")

        await bot.send_message(cfg.SMOOTHIE_CHANNEL_ID,
                text_best_smoothie,
                parse_mode="html")
        return

    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, —è –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π —Ä–µ—Ü–µ–ø—Ç, –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å–º—É–∑–∏:{sm.get_variant(5)}"
        )
    
    


# # –ö–æ–ª–±–µ–∫ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∞–π—Ç–ª–∏—Å—Ç
# @dp.callback_query_handler(IsAdmin(),lambda c: c.data and c.data.startswith('add_smoothie_user_'))
# async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
#     user_id = callback_query.data[18:]
#     msg_id = callback_query.message.message_id
#     chat_id = callback_query.message.chat.id

#     who = await bot.get_chat(int(user_id))

#     db.add_id_to_smoothie_users(user_id)
#     await bot.answer_callback_query(callback_query.id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω')
#     await bot.delete_message(chat_id, msg_id)

#     logger.info(callback_query.from_user)
#     await bot.send_message(chat_id,
#         f"<a href ='tg://user?id={callback_query.from_user.id}'>{callback_query.from_user.first_name}</a> "
#         f"–¥–æ–±–∞–≤–∏–ª <a href ='tg://user?id={who.id}'>{who.full_name}</a>",
#         parse_mode="html")


